<#
.SYNOPSIS
    Gets the list of applications configured with Exploit Protection.
.DESCRIPTION
    Gets the list of applications configured with Exploit Protection from a given configuration file.

.PARAMETER ConfigFile
    Path to the configuration file.
    
.EXAMPLE
    C:\PS>Get-EPApps -ConfigFile PATH_TO_EXPLOIT-PROTECTION_XML_FILE

.LINK
     https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-exploit-guard/customize-exploit-protection
    https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-exploit-guard/import-export-exploit-protection-emet-xml

.NOTES
    Author: Dario B. (darizotas at gmail dot com)
    Date:   Feb 27, 2019
    
    Copyright 2019 Dario B. darizotas at gmail dot com
    This software is licensed under a new BSD License.
    Unported License. http://opensource.org/licenses/BSD-3-Clause
#>
function Get-EPApps {
    param(
        # Configuration file
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String]
        $ConfigFile
    )

    [xml]$EPConfig = Get-Content $ConfigFile
    $EPConfig.MitigationPolicy.AppConfig | Select -ExpandProperty Executable
}

<#
.SYNOPSIS
    Gets the list of EP mitigations configured for an application.
.DESCRIPTION
    Gets the list of EP mitigations configured for an application.

.PARAMETER ConfigFile
    Path to the configuration file.
    
.PARAMETER AppName
    Application name.

.EXAMPLE
    C:\PS>Get-EPAppMitigations -ConfigFile PATH_TO_EXPLOIT-PROTECTION_XML_FILE -AppName 'Acrobat.exe'

.LINK
     https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-exploit-guard/customize-exploit-protection
    Get-EPApps

.NOTES
    Author: Dario B. (darizotas at gmail dot com)
    Date:   Feb 27, 2019
    
    Copyright 2019 Dario B. darizotas at gmail dot com
    This software is licensed under a new BSD License.
    Unported License. http://opensource.org/licenses/BSD-3-Clause
#>
function Get-EPAppMitigations {
    param(
        # Configuration file
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String]
        $ConfigFile,

        # Application name
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [String]
        $AppName
    )

    [xml]$EPConfig = Get-Content $ConfigFile
    $EPConfig.MitigationPolicy.AppConfig | ? { $_.Executable -ilike $AppName }
}

<#
.SYNOPSIS
    Gets the settings for a mitigation applied to an application.
.DESCRIPTION
    Gets the settings for a mitigation applied to an application.

.PARAMETER ConfigFile
    Path to the configuration file.
    
.PARAMETER AppName
    Application name.

.PARAMETER MitigationName
    Mitigation name.

.EXAMPLE
    C:\PS>Get-EPAppMitigationConfig -ConfigFile PATH_TO_EXPLOIT-PROTECTION_XML_FILE -AppName 'Acrobat.exe' -MitigationName DEP

.LINK
     https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-exploit-guard/customize-exploit-protection
    Get-EPApps

.NOTES
    Author: Dario B. (darizotas at gmail dot com)
    Date:   Feb 27, 2019
    
    Copyright 2019 Dario B. darizotas at gmail dot com
    This software is licensed under a new BSD License.
    Unported License. http://opensource.org/licenses/BSD-3-Clause
#>
function Get-EPAppMitigationConfig {
    param(
        # Configuration file
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String]
        $ConfigFile,

        # Application name
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [String]
        $AppName,

        # Mitigation name
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [String]
        $MitigationName
    )

    Get-EPAppMitigations -ConfigFile $ConfigFile -AppName $AppName | select -ExpandProperty $MitigationName
}

<#
.SYNOPSIS
    Compares two list of applications protected by Exploit Protection.
.DESCRIPTION
    Compares two list of applications protected by Exploit Protection.
    
    It is based on the cmdlet Compare-Object

.PARAMETER ReferenceConfigFile
    Path to the reference configuration file.
    
.PARAMETER DifferenceConfigFile
    Path to the difference configuration file.

.PARAMETER IncludeEqual
    Flag to indicate to display mitigations that are equal.

.PARAMETER ExcludeDifferent
    Flag to indicate to omit mitigations that are different.
    
.EXAMPLE
    It will only display the differences.
    
    C:\PS>Compare-EPApps -ReferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_BASELINE_XML_FILE -DifferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_DIFFERENCE_XML_FILE 

.EXAMPLE
    It will display the differences and the apps that are equal.
    
    C:\PS>Compare-EPApps -ReferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_BASELINE_XML_FILE -DifferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_DIFFERENCE_XML_FILE -IncludeEqual

.EXAMPLE
    It will only display the apps that are equal.
    
    C:\PS>Compare-EPApps -ReferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_BASELINE_XML_FILE -DifferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_DIFFERENCE_XML_FILE -IncludeEqual -ExcludeDifferent

    
.LINK
     https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-exploit-guard/customize-exploit-protection
    https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/compare-object?view=powershell-6
    Get-EPAppMitigations

.NOTES
    Author: Dario B. (darizotas at gmail dot com)
    Date:   Feb 27, 2019
    
    Copyright 2019 Dario B. darizotas at gmail dot com
    This software is licensed under a new BSD License.
    Unported License. http://opensource.org/licenses/BSD-3-Clause
#>
function Compare-EPApps {
    param(
        # Reference configuration file
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String]
        $ReferenceConfigFile,

        # Difference configuration file
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String]
        $DifferenceConfigFile,

        # Includes the mitigations that are equal.
        [Parameter()]
        [switch]
        $IncludeEqual,

        # Excludes the mitigations that are different.
        [Parameter()]
        [switch]
        $ExcludeDifferent
    )

    $ReferenceList = Get-EPApps -ConfigFile $ReferenceConfigFile
    $DifferenceList = Get-EPApps -ConfigFile $DifferenceConfigFile
    Compare-Object $ReferenceList $DifferenceList -IncludeEqual:$IncludeEqual -ExcludeDifferent:$ExcludeDifferent
}


<#
.SYNOPSIS
    Compares two list of mitigations applied to an application.
.DESCRIPTION
    Compares two list of mitigations applied to an application.
    
    It is based on the cmdlet Compare-Object

.PARAMETER ReferenceConfigFile
    Path to the reference configuration file.
    
.PARAMETER DifferenceConfigFile
    Path to the difference configuration file.

.PARAMETER AppName
    Application name.

.PARAMETER IncludeEqual
    Flag to indicate to display mitigations that are equal.

.PARAMETER ExcludeDifferent
    Flag to indicate to omit mitigations that are different.
    
.EXAMPLE
    It will only display the differences.
    
    C:\PS>Compare-EPAppMitigations -ReferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_BASELINE_XML_FILE -DifferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_DIFFERENCE_XML_FILE -AppName 'Acrobat.exe'

.EXAMPLE
    It will display the differences and the mitigations that are equal.
    
    C:\PS>Compare-EPAppMitigations -ReferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_BASELINE_XML_FILE -DifferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_DIFFERENCE_XML_FILE -AppName 'Acrobat.exe' -IncludeEqual

.EXAMPLE
    It will only display the mitigations that are equal.
    
    C:\PS>Compare-EPAppMitigations -ReferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_BASELINE_XML_FILE -DifferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_DIFFERENCE_XML_FILE -AppName 'Acrobat.exe' -IncludeEqual -ExcludeDifferent

    
.LINK
     https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-exploit-guard/customize-exploit-protection
    https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/compare-object?view=powershell-6
    Get-EPAppMitigations

.NOTES
    Author: Dario B. (darizotas at gmail dot com)
    Date:   Feb 27, 2019
    
    Copyright 2019 Dario B. darizotas at gmail dot com
    This software is licensed under a new BSD License.
    Unported License. http://opensource.org/licenses/BSD-3-Clause
#>
function Compare-EPAppMitigations {
    param(
        # Reference configuration file
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String]
        $ReferenceConfigFile,

        # Difference configuration file
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String]
        $DifferenceConfigFile,

        # Application name
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [String]
        $AppName,

        # Includes the mitigations that are equal.
        [Parameter()]
        [switch]
        $IncludeEqual,

        # Excludes the mitigations that are different.
        [Parameter()]
        [switch]
        $ExcludeDifferent
    )

    $ReferenceList = Get-EPAppMitigations -ConfigFile $ReferenceConfigFile -AppName $AppName
    $DifferenceList = Get-EPAppMitigations -ConfigFile $DifferenceConfigFile -AppName $AppName
    Compare-Object $ReferenceList.ChildNodes.Name $DifferenceList.ChildNodes.Name -IncludeEqual:$IncludeEqual -ExcludeDifferent:$ExcludeDifferent
}

<#
.SYNOPSIS
    Compares all properties of two objects.
.DESCRIPTION
    Compares all properties of two objects.
    
    It has been taken from Jamie Nelson Microsoft TechNet Blog. All credits go to that blog post

.PARAMETER ReferenceObject
    Reference Object
    
.PARAMETER DifferenceObject
    Difference object.
    
.LINK
     https://blogs.technet.microsoft.com/janesays/2017/04/25/compare-all-properties-of-two-objects-in-windows-powershell/
#>
Function Compare-ObjectProperties {
    Param(
        [PSObject]$ReferenceObject,
        [PSObject]$DifferenceObject 
    )
    $objprops = $ReferenceObject | Get-Member -MemberType Property,NoteProperty | % Name
    $objprops += $DifferenceObject | Get-Member -MemberType Property,NoteProperty | % Name
    $objprops = $objprops | Sort | Select -Unique
    $diffs = @()
    foreach ($objprop in $objprops) {
        $diff = Compare-Object $ReferenceObject $DifferenceObject -Property $objprop
        if ($diff) {            
            $diffprops = @{
                PropertyName=$objprop
                RefValue=($diff | ? {$_.SideIndicator -eq '<='} | % $($objprop))
                DiffValue=($diff | ? {$_.SideIndicator -eq '=>'} | % $($objprop))
            }
            $diffs += New-Object PSObject -Property $diffprops
        }        
    }
    if ($diffs) {return ($diffs | Select PropertyName,RefValue,DiffValue)}
 }

<#
.SYNOPSIS
    Compares two set of mitigation settings applied to an application.
.DESCRIPTION
    Compares two set of mitigation settings applied to an application.
    
    It is based on the cmdlet Compare-ObjectProperties

.PARAMETER ReferenceConfigFile
    Path to the reference configuration file.
    
.PARAMETER DifferenceConfigFile
    Path to the Difference configuration file.

.PARAMETER AppName
    Application name.

.PARAMETER MitigationName
    Mitigation name.
    
.EXAMPLE
    
    C:\PS>Compare-EPAppMitigations -ReferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_BASELINE_XML_FILE -DifferenceConfigFile PATH_TO_EXPLOIT-PROTECTION_DIFFERENCE_XML_FILE -AppName 'Acrobat.exe' -MitigationName ASLR

    
.LINK
     https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-exploit-guard/customize-exploit-protection
    Compare-ObjectProperties
    Get-EPAppMitigationConfig

.NOTES
    Author: Dario B. (darizotas at gmail dot com)
    Date:   Feb 27, 2019
    
    Copyright 2019 Dario B. darizotas at gmail dot com
    This software is licensed under a new BSD License.
    Unported License. http://opensource.org/licenses/BSD-3-Clause
#>
function Compare-EPAppMitigationConfig{
    param(
        # Reference configuration file
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String]
        $ReferenceConfigFile,

        # Difference configuration file
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String]
        $DifferenceConfigFile,

        # Application name
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [String]
        $AppName,

        # Mitigation name
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [String]
        $MitigationName
    )

    $ReferenceAppMitigationConfig = Get-EPAppMitigationConfig -ConfigFile $ReferenceConfigFile -AppName $AppName -MitigationName $MitigationName
    $DifferenceAppMitigationConfig = Get-EPAppMitigationConfig -ConfigFile $DifferenceConfigFile -AppName $AppName -MitigationName $MitigationName
    Compare-ObjectProperties $ReferenceAppMitigationConfig $DifferenceAppMitigationConfig
}

<#
.SYNOPSIS
    Removes the Exploit Protection Process Mitigations in registry.
.DESCRIPTION
    Removes the Exploit Protection Process Mitigations in registry.
    
    It removes the properties: MitigationOptions and MitigationAuditOptions. But also if it was also 
    included the full path of the executable (UseFilter), it removes the subtree attached to FilterFullPath.
    
    It is based on Microsoft Docs code excerpt to troubleshoot Exploit Protection migitations.

.PARAMETER Name
    List of processes names.
    
.PARAMETER All
    Flag to indicate that all Process Mitigations will be removed.

.EXAMPLE
    Remove the Process Mitigations for winword.exe
    C:\PS>Remove-EPProcessMitigations -Name winword.exe

.EXAMPLE
    Remove the Process Mitigations for winword.exe, visio.exe
    C:\PS>Remove-EPProcessMitigations -Name winword.exe,visio.exe
    
    From the pipeline
    C:\PS>@("winword.exe","visio.exe") | Remove-EPProcessMitigations

.EXAMPLE
    Remove all Process Mitigations
    C:\PS>Remove-EPProcessMitigations -All

    Remove all Process Mitigations
    C:\PS>Remove-EPProcessMitigations
    
.LINK
     https://github.com/MicrosoftDocs/windows-itpro-docs/blob/master/windows/security/threat-protection/windows-defender-exploit-guard/troubleshoot-exploit-protection-mitigations.md
    https://github.com/gunnarhaslinger/Windows-Defender-Exploit-Guard-Configuration
    https://superuser.com/questions/776300/is-it-possible-to-give-the-full-path-to-an-executable-in-image-execution-option
    

.NOTES
    Author: Dario B. (darizotas at gmail dot com)
    Date:   Mar 05, 2019
    
    This software is licensed under Microsoft Open Source Code of Conduct.
    https://opensource.microsoft.com/codeofconduct/
#>
function Remove-EPAppMitigations {
    [CmdletBinding(DefaultParameterSetName='All')]
    param(
        # Process name
        [Parameter(ParameterSetName='Process',Mandatory=$true,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Name,

        # Flag to indicate all
        [Parameter(ParameterSetName='All')]
        [switch]
        $All
    )
    
    BEGIN {
        # Includes the functions taken from Microsoft Docs
        # https://github.com/MicrosoftDocs/windows-itpro-docs/blob/master/windows/security/threat-protection/windows-defender-exploit-guard/troubleshoot-exploit-protection-mitigations.md
        . "$PSScriptRoot\ProcessMitigations.ps1"
        
        if (!(Test-IsAdmin)) {
            throw "ERROR: No Administrator-Privileges detected!"; return 
        }
        
    }
    PROCESS {
        switch ($PSCmdlet.ParameterSetName) {
            'All' {
                $Mitigations = Get-ChildItem -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options"
            }
            'Process' {
                $Mitigations = @()
                foreach ($App in $Name) {
                    $Mitigations += Get-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\$App" -ErrorAction Continue
                }
            }
        }
        
        $Mitigations | ForEach-Object {
            $MitigationItem = $_; 
            $MitigationItemName = $MitigationItem.PSChildName

            Try {
                Remove-ProcessMitigations $MitigationItem $MitigationItemName

                # "UseFilter" indicate full path filters may be present
                if ($MitigationItem.GetValue("UseFilter")) {
                    Get-ChildItem -Path $MitigationItem.PSPath | ForEach-Object {
                        $FullPathItem = $_
                        if ($FullPathItem.GetValue("FilterFullPath")) {
                            $Name = $MitigationItemName + "-" + $FullPathItem.GetValue("FilterFullPath")
                            Write-Host "Removing FullPathEntry:              " $Name
                            Remove-ProcessMitigations $FullPathItem $Name
                        }
                
                        # If there are no subkeys now, we can delete the "UseFilter" value
                        if ($MitigationItem.SubKeyCount -eq 0) {
                            Remove-ItemProperty -Path $MitigationItem.PSPath -Name "UseFilter" -ErrorAction Stop
                        }
                    }
                }
                if (($MitigationItem.SubKeyCount -eq 0) -and ($MitigationItem.ValueCount -eq 0)) {
                    Write-Host "Removing empty Entry:                " $MitigationItemName
                    Remove-Item -Path $MitigationItem.PSPath -ErrorAction Stop
                }
            }
            Catch { 
                Write-Error "ERROR:" $_.Exception.Message "- at ($MitigationItemName)" 
            }
        }
    }
    END {}
}

<#
.SYNOPSIS
    Merges Exploit Protection config files into one config file.
.DESCRIPTION
    Merges Exploit Protection config files into one config file.
    
    In case there are applications repeated in the different configuration files to be merged, only
    the first appearance will be merged, the rest will be skipped. That means, possible conflicting
    configuration must be resolved manually in advance.
    
    It is based on the same principle than the project PSSysmonTools and sysmon-modular. However,
    it returns an array with the results of the merge. This can be sent to a CSV file.
    It records the following for each merge operation:
    - AppName: Application name or n/a
    - RefFile: Reference/origin file.
    - Operation: Add, Skip, Empty/Error

.PARAMETER ReferenceConfigPath
    Path to the Exploit Protection reference configuration file.
    
.PARAMETER ConfigToMergePath
    List of Exploit Protection configuration files to be merged.

.PARAMETER OutputConfigPath
    Path where to save the merged Exploit Protection configuration file.

.EXAMPLE
    Merge the Exploit Protection configuration files contained in a directory and use as reference
    Windows Security Baseline
    
    $ReferenceConfigFile = 'PATH_TO\Windows 10 Version 1709 EP Security Baseline.xml'
    $ConfigToMergePath = 'PATH_TO_EP_CONFIGURATION_FILES'

    Get-ChildItem $ConfigToMergePath | Select -expandproperty fullname | Merge-EPAppMitigationConfig -ReferenceConfigPath $ReferenceConfigFile -OutputConfigPath 'PATH_TO_SEND_MERGE_FILE' -verbose | ft

.LINK
     https://github.com/olafhartong/PSSysmonTools
    https://github.com/olafhartong/sysmon-modular
    https://github.com/mattifestation/PSSysmonTools
    
.NOTES
    Author: Dario B. (darizotas at gmail dot com)
    Date:   Mar 05, 2019
    
    Copyright 2019 Dario B. darizotas at gmail dot com
    This software is licensed under a new BSD License.
    Unported License. http://opensource.org/licenses/BSD-3-Clause
#>
function Merge-EPAppMitigationConfig {
    [CmdletBinding()]
    param(
        # Reference configuration
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String]
        $ReferenceConfigPath,
        
        # Configuration to merge
        [Parameter(Mandatory=$true,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [String[]]
        $ConfigToMergePath,
        
        # Output path to create the merged configuration
        [Parameter(Mandatory=$true)]
        [ValidateScript({Test-Path $_ -PathType Container})]
        [String]
        $OutputConfigPath
    )
    
    BEGIN {
        $MergedConfig = New-Object system.Xml.XmlDocument
        $MitigationPolicy = $MergedConfig.CreateElement("MitigationPolicy")
        $MergedConfig.AppendChild($MitigationPolicy) | out-null
        $ProcessList = @()
        $Log = @()
        
        # Populates the merged configuration with the reference configuration.
        try {
            [xml]$ReferenceConfig = Get-Content $ReferenceConfigPath
            $ReferenceConfig.MitigationPolicy.AppConfig | % { 
                $MitigationPolicy.AppendChild($MergedConfig.ImportNode($_, $true)) | out-null
                $ProcessList += $_.Executable

                # Log results
                $Log += [PSCustomObject]@{
                    "AppName" = $_.Executable
                    "RefFile" = $ReferenceConfigPath
                    "Operation" = "Add"
                }
            }
        # File empty/not XML schema compliant
        } catch {
            write-warning "$ReferenceConfigPath is either empty or it does not comply with the XML schema."
            # Log results
            $Log += [PSCustomObject]@{
                "AppName" = "n/a"
                "RefFile" = $ReferenceConfigPath
                "Operation" = "Empty/Error"
            }
        }
    }
    PROCESS {
        Foreach ($ConfigPath in $ConfigToMergePath) {
            write-verbose "Parsing $ConfigPath"
            
            try {
                [xml]$Config = Get-Content $ConfigPath
                # Goes through the mitigation 
                $Config.MitigationPolicy.AppConfig | % { 
                    write-verbose "Adding Mitigations for $($_.Executable)"
                    # If the app was already processed, it is ignored for the following appearances
                    if (-not $ProcessList.Contains($_.Executable)) {
                        $MitigationPolicy.AppendChild($MergedConfig.ImportNode($_, $true)) | out-null
                        $ProcessList += $_.Executable
                        $Operation = "Add"
                    } else {
                        write-warning "Skipping $($_.Executable). It already exists!"
                        $Operation = "Skip"
                    }

                    # Log results
                    $Log += [PSCustomObject]@{
                        "AppName" = $_.Executable
                        "RefFile" = $ConfigPath
                        "Operation" = $Operation
                    }
                } 
            # File empty/not XML schema compliant
            } catch {
                write-warning "$ConfigPath is either empty or it does not comply with the XML schema."
                # Log results
                $Log += [PSCustomObject]@{
                    "AppName" = "n/a"
                    "RefFile" = $ConfigPath
                    "Operation" = "Empty/Error"
                }
            }
        }
    }
    END {
        # Merged file
        $MergedConfigFile = "$(Get-Date -Format FileDateTime)-ExploitProtection.xml"
        $MergedConfig.Save("$(Resolve-Path $OutputConfigPath)\$MergedConfigFile")

        # Results
        $Log
    }
}